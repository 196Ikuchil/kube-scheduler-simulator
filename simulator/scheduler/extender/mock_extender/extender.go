// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/kube-scheduler-simulator/simulator/scheduler/extender (interfaces: Extender)

// Package mock_extender is a generated GoMock package.
package mock_extender

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/kube-scheduler/extender/v1"
)

// MockExtender is a mock of Extender interface.
type MockExtender struct {
	ctrl     *gomock.Controller
	recorder *MockExtenderMockRecorder
}

// MockExtenderMockRecorder is the mock recorder for MockExtender.
type MockExtenderMockRecorder struct {
	mock *MockExtender
}

// NewMockExtender creates a new mock instance.
func NewMockExtender(ctrl *gomock.Controller) *MockExtender {
	mock := &MockExtender{ctrl: ctrl}
	mock.recorder = &MockExtenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtender) EXPECT() *MockExtenderMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockExtender) Bind(arg0 v1.ExtenderBindingArgs) (*v1.ExtenderBindingResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0)
	ret0, _ := ret[0].(*v1.ExtenderBindingResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bind indicates an expected call of Bind.
func (mr *MockExtenderMockRecorder) Bind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockExtender)(nil).Bind), arg0)
}

// Filter mocks base method.
func (m *MockExtender) Filter(arg0 v1.ExtenderArgs) (*v1.ExtenderFilterResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(*v1.ExtenderFilterResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockExtenderMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockExtender)(nil).Filter), arg0)
}

// Name mocks base method.
func (m *MockExtender) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockExtenderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockExtender)(nil).Name))
}

// Preempt mocks base method.
func (m *MockExtender) Preempt(arg0 v1.ExtenderPreemptionArgs) (*v1.ExtenderPreemptionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preempt", arg0)
	ret0, _ := ret[0].(*v1.ExtenderPreemptionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preempt indicates an expected call of Preempt.
func (mr *MockExtenderMockRecorder) Preempt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockExtender)(nil).Preempt), arg0)
}

// Prioritize mocks base method.
func (m *MockExtender) Prioritize(arg0 v1.ExtenderArgs) (*v1.HostPriorityList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prioritize", arg0)
	ret0, _ := ret[0].(*v1.HostPriorityList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prioritize indicates an expected call of Prioritize.
func (mr *MockExtenderMockRecorder) Prioritize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prioritize", reflect.TypeOf((*MockExtender)(nil).Prioritize), arg0)
}
